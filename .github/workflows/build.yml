---
name: Build

# Controls when the workflow will run
'on':
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "47 3 * * 0"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: pip3 install yamllint

      - name: Lint code.
        run: |
          yamllint .

  # Build the images and push them to Docker repository.
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      IMAGE_NAMESPACE: coglinev3
      BASE_IMAGE_NAME: python
      IMAGE_NAME: ansible
    strategy:
      matrix:
        include:
          - CONTAINER_DISTRO: alpine-3.16
            CONTAINER_CMD: /sbin/init
            IMAGE_ALTERNATE_TAG: latest
          - CONTAINER_DISTRO: alpine-3.15
            CONTAINER_CMD: /sbin/init
          - CONTAINER_DISTRO: alpine-3.14
            CONTAINER_CMD: /sbin/init
          - CONTAINER_DISTRO: alpine-3.13
            CONTAINER_CMD: /sbin/init
          - CONTAINER_DISTRO: alpine-3.12
            CONTAINER_CMD: /sbin/init
          - CONTAINER_DISTRO: centos-7
          - CONTAINER_DISTRO: almalinux-8
          - CONTAINER_DISTRO: debian-8
            CONTAINER_CMD: /sbin/init
            IMAGE_ALTERNATE_TAG: debian-jessie
          - CONTAINER_DISTRO: debian-9
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: debian-stretch
          - CONTAINER_DISTRO: debian-10
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: debian-buster
          - CONTAINER_DISTRO: debian-11
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: debian-bullseye
          - CONTAINER_DISTRO: fedora-34
          - CONTAINER_DISTRO: fedora-35
          - CONTAINER_DISTRO: fedora-36
          - CONTAINER_DISTRO: ubuntu-18.04
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: ubuntu-bionic
          - CONTAINER_DISTRO: ubuntu-20.04
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: ubuntu-focal
          - CONTAINER_DISTRO: ubuntu-22.04
            CONTAINER_CMD: /bin/systemd
            IMAGE_ALTERNATE_TAG: ubuntu-jammy

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set environment variables
        run: |
          echo "ANSIBLE_PYTHON_INTERPRETER=${pythonLocation}/bin/python3" >> $GITHUB_ENV
          echo "CONTAINER_DISTRO=${{ matrix.CONTAINER_DISTRO }}" >> $GITHUB_ENV
          echo "CONTAINER_CMD=${{ matrix.CONTAINER_CMD }}" >> $GITHUB_ENV
          echo "IMAGE_ALTERNATE_TAG=${{ matrix.IMAGE_ALTERNATE_TAG }}" >> $GITHUB_ENV

      - name: Debug informations
        run: whoami; id; getent passwd; getent group

      - name: Install Ansible
        run: pip3 install --upgrade ansible docker jsonschema testresources

      - name: Create Ansible roles directory
        run: mkdir -p ~/.ansible/roles

      - name: Configure Ansible
        run: cp .github/ansible.cfg ~/.ansible.cfg

      - name: Set up Ansible inventory file
        run: cp .github/hosts ~/.ansible/hosts

      - name: Show Ansible version
        run: ansible --version

      - name: Install required Ansible Role(s)
        run: ansible-galaxy install -r requirements.yml -p ~/.ansible/roles

      - name: Configure storage driver for podman
        run: |
          mkdir -p ~/.config/containers
          cp .github/storage.conf ~/.config/containers
          mkdir -p /home/runner/.local/share/containers/storage

      - name: Install Ansible-Bender
        run: ansible-playbook .github/ansible-bender.yml

      - name: Create storage state directory
        run: |
          sudo mkdir -p /run/user/${UID}/run
          sudo chown -R runner:docker /run/user/${UID}
          sudo mkdir  /tmp/1001
          sudo chown -R runner:docker /tmp/1001
          ls -la /run/user
          ls -la /tmp/1001
          ls -la /proc/self/

      - name: Check buildah and podman version
        run: |
          echo "podman version"
          podman version
          echo "buildah version"
          buildah version

      - name: Show buildah and podman info
        run: |
          echo "podman info"
          podman info
          echo "buildah info"
          buildah info

      - name: Build image with Ansible-Bender
        run: ansible-bender build --no-cache container-ansible.yml
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

      - name: Show local podman images
        run: podman images

      # - name: Push image to docker daemon
      #   run: >
      #     podman push ${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}
      #     docker-daemon:${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}

      # - name: Inspect local podman image
      #   run: podman inspect localhost/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}

      # - name: Start a container from the new created image
      #   run: >
      #     podman --log-level=debug run -d --name check_ansible
      #     --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro
      #     localhost/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${CONTAINER_DISTRO}

      # - name: Show container processes
      #   run: podman ps -a

      # - name: Show container Ansible version
      #   run: >
      #     podman exec --user ansible check_ansible env TERM=xterm
      #     ansible --version

      # - name: Show container os-release
      #   run: >
      #     podman exec --user ansible check_ansible env TERM=xterm
      #     /bin/sh -c "ansible localhost -m setup -a 'filter=ansible_distribution*'"

      # - name: Check if SSH is running inside the container
      #   run: >
      #     podman exec --user ansible check_ansible env TERM=xterm
      #     /bin/sh -c "ps -ef | grep ssh"

      # - name: Stop the container
      #   run: podman stop check_ansible

      - name: Push image to DockerHub
        run: bash scripts/docker_push
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Update Docker Hub description
  dockerHubDescription:
    runs-on: ubuntu-latest
    needs:
      - lint
      - build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: coglinev3/ansible
