---
name: Build

# Controls when the workflow will run
'on':
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    - cron: "47 3 * * 0"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4

      - name: Run ansible-lint
        uses: ansible-actions/ansible-lint-action@v1.0.2
        with:
          target: "./"
          required_collections: 'community.general'

  # Build the images and push them to Docker repository.
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      CONTAINER_IMAGE_NAMESPACE: coglinev3
      CONTAINER_IMAGE_NAME: ansible
    strategy:
      matrix:
        include:
          - CONTAINER_DISTRO: alpine-3.19
            CONTAINER_IMAGE_ALTERNATE_TAG: latest
          - CONTAINER_DISTRO: alpine-3.18
          - CONTAINER_DISTRO: alpine-3.17
          - CONTAINER_DISTRO: alpine-3.16
          - CONTAINER_DISTRO: alpine-3.15
          - CONTAINER_DISTRO: alpine-3.14
          - CONTAINER_DISTRO: alpine-3.13
          - CONTAINER_DISTRO: amazonlinux-2023
          - CONTAINER_DISTRO: almalinux-9
            PYTHON_INTERPRETER: /usr/libexec/platform-python
          - CONTAINER_DISTRO: debian-10
            CONTAINER_CMD: /bin/systemd
            CONTAINER_IMAGE_ALTERNATE_TAG: debian-buster
          - CONTAINER_DISTRO: debian-11
            CONTAINER_CMD: /bin/systemd
            CONTAINER_IMAGE_ALTERNATE_TAG: debian-bullseye
          - CONTAINER_DISTRO: debian-12
            CONTAINER_CMD: /bin/systemd
            CONTAINER_IMAGE_ALTERNATE_TAG: debian-bookworm
          - CONTAINER_DISTRO: fedora-34
          - CONTAINER_DISTRO: fedora-35
          - CONTAINER_DISTRO: fedora-36
          - CONTAINER_DISTRO: fedora-37
          - CONTAINER_DISTRO: fedora-38
          - CONTAINER_DISTRO: fedora-39
          - CONTAINER_DISTRO: ubuntu-20.04
            CONTAINER_CMD: /bin/systemd
            CONTAINER_IMAGE_ALTERNATE_TAG: ubuntu-focal
          - CONTAINER_DISTRO: ubuntu-22.04
            CONTAINER_CMD: /bin/systemd
            CONTAINER_IMAGE_ALTERNATE_TAG: ubuntu-jammy

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "PYTHON_INTERPRETER=${{ matrix.PYTHON_INTERPRETER || '/usr/bin/python3' }}" >> $GITHUB_ENV
          echo "CONTAINER_DISTRO=${{ matrix.CONTAINER_DISTRO }}" >> $GITHUB_ENV
          echo "CONTAINER_CMD=${{ matrix.CONTAINER_CMD }}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE_ALTERNATE_TAG=${{ matrix.CONTAINER_IMAGE_ALTERNATE_TAG }}" >> $GITHUB_ENV
          echo "BASE_IMAGE_NAMESPACE=${{ matrix.BASE_IMAGE_NAMESPACE }}" >> $GITHUB_ENV
          echo "BASE_IMAGE_NAME=${{ matrix.BASE_IMAGE_NAME }}" >> $GITHUB_ENV
          echo "BASE_IMAGE_TAG=${{ matrix.BASE_IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Install Ansible
        run: pip3 install --upgrade ansible docker jsonschema testresources

      - name: Configure Ansible
        run: |
          mkdir -p ~/.ansible/roles
          cp .github/ansible.cfg ~/.ansible.cfg
          cp .github/hosts ~/.ansible/hosts
          ansible --version

      - name: Install required Ansible Role(s)
        # run: ansible-galaxy install -r requirements.yml -p ~/.ansible/roles
        run: ansible-galaxy install -r .github/requirements.yml -p ~/.ansible/roles

      - name: Install crun
        run: |
          mkdir -p ~/.local/bin
          curl -s -L "https://github.com/containers/crun/releases/download/${CRUN_VER}/crun-${CRUN_VER}-linux-amd64" -o ~/.local/bin/crun
          chmod +x ~/.local/bin/crun
        env:
          CRUN_VER: '1.11.2'

      - name: Configure storage driver, runtime and crun for podman
        run: |
          mkdir -p ~/.config/containers
          cp .github/storage.conf ~/.config/containers
          mkdir -p /home/runner/.local/share/containers/storage
          cp .github/libpod.conf ~/.config/containers
          cp .github/containers.conf ~/.config/containers

      - name: Install Ansible-Bender
        run: ansible-playbook .github/ansible-bender.yml

      - name: Create storage state directory
        run: |
          sudo mkdir -p /run/user/${UID}/run
          sudo chown -R runner:docker /run/user/${UID}
          sudo mkdir  /tmp/${UID}
          sudo chown -R runner:docker /tmp/${UID}

      - name: "Check buildah, podman and crun version"
        run: |
          echo "podman version"
          podman --version
          echo
          echo "crun version"
          crun --version
          echo
          echo "buildah version"
          buildah --version

      - name: Build image with Ansible-Bender
        run: ansible-bender build --no-cache --python-interpreter=${PYTHON_INTERPRETER} container-ansible.yml
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

      - name: Show local images
        run: podman images

      - name: Start a container from the new created image
        run: >
          podman run --detach --rm --name check_ansible
          localhost/${CONTAINER_IMAGE_NAMESPACE}/${CONTAINER_IMAGE_NAME}:${CONTAINER_DISTRO}

      - name: Show podman processes
        run: podman ps -a

      - name: Show container os-release
        run: >
          podman exec --user ansible check_ansible env TERM=xterm
          /bin/bash -c "ansible localhost -m setup -a 'filter=ansible_distribution*'"

      - name: Show container Ansible version
        run: >
          podman exec --user ansible check_ansible env TERM=xterm
          ansible --version

      - name: Show container bash version
        run: >
          podman exec --user ansible check_ansible env TERM=xterm
          bash --version

      - name: Check if SSH is running inside the container
        run: >
          podman exec --user ansible check_ansible env TERM=xterm
          /bin/bash -c "ps -ef | grep ssh"

      - name: Stop the container
        run: podman stop check_ansible

      - name: Push image to DockerHub
        run: bash scripts/docker_push
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Update Docker Hub description
  dockerHubDescription:
    runs-on: ubuntu-latest
    needs:
      - lint
      - build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: coglinev3/ansible
